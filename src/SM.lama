-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  var sm = c[0];
  var st = c[1];
  var w = c[2];
  case insns of
    {}     -> c
  | x : xs -> case x of
                READ      -> var r = readWorld (w);
                             eval ([r.fst : sm, st, r.snd], xs)  				               
              | WRITE     -> case sm of
	  	                y : ys -> eval ([ys, st, writeWorld (y, w)], xs)
	  	              esac
              | BINOP (s) -> case sm of
                               y : ys -> case ys of
                                           z : zs -> eval ([binOp (s) (z, y) : zs, st, w], xs)
                                         esac 
                             esac 				   		        
              | LD    (c) -> eval ([st (c) : sm, st, w], xs)
              | ST    (c) -> case sm of
                               y : ys -> eval ([ys, st <- [c, y], w], xs)
                             esac			      
              | CONST (n) -> eval ([n : sm, st, w], xs)
              esac 
  esac
	
	
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var   (x)        -> {LD (x)}
  | Const (n)        -> {CONST (n)}
  | Binop (op, a, b) -> compileExpr (a) +++ compileExpr (b) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn  (x, e)   -> compileExpr (e) +++ {ST (x)}
  | Seq   (s1, s2) -> compileSM (s1) +++ compileSM (s2)
  | Skip           -> {}
  | Read  (x)      -> {READ, ST (x)}
  | Write (e)      -> compileExpr (e) +++ {WRITE}
  esac
}
